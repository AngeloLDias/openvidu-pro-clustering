---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Openvidu Server Pro CloudFormation template."

Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance."
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."

  AwsInstanceTypeOV:
    Type: String
    Description: Specifies the EC2 instance type for your OpenVidu instance
    Default: t2.large
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

  AwsInstanceTypeKMS:
    Type: String
    Description: Specifies the EC2 instance type for your Kurento instances
    Default: t2.large
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

  MyDomainName:
    Description: "Valid DNS record name like mycompany.com."
    Type: String
    Default: openvidu.mycompany.com
    AllowedPattern: >-
      ^(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d])\.)*(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d]))\.?$
    ConstraintDescription: >-
      Must be a valid DNS name. Like myapp.example.com

  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
    Default: 1.0.2.0
    AllowedPattern: >-
      ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$
    ConstraintDescription: >-
      Must be a valid IP address. A valid IP address must be in the form of xxx.xxx.xxx.xxx, where xxx is a number from 0-255.

  OpenViduLicense:
    Description: "Purchased OpenVidu License."
    Type: String
    NoEcho: true

  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server and Kibana Dashboard."
    Type: String
    NoEcho: true

  OpenviduCDREnable:
    Description: "Whether to enable Call Detail Record or not"
    Type: String
    Default: true

  MediaNodesStartNumber:
    Description: "How many media server do you want to launch by default"
    Type: Number
    Default: 1

  KibanaUser:
    Description: "Username for Kibana Dashboard"
    Type: String
    Default: kibanaadmin

  KibanaPassword:
    Description: "Password for Kibana Dashboard"
    Type: String
    NoEcho: true

  WhichCert:
    Description: "You can choose from the list below which certificate to use."
    Type: String
    Default: selfsigned
    AllowedValues:
    - selfsigned
    - letsencrypt
    - owncert
    - customcert

  LetsEncryptEmail:
    Description: "Email necesary for Let's Encrypt notifications."
    Type: String

  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY:
    Description: "URL to the KEY file"
    Type: String

  FreeHTTPAccesToRecordingVideos:
    Description: "Do you want your recordings to be access publicly?"
    Type: String
    Default: false
    AllowedValues:
    - true
    - false

  OpenviduRecordingNotification:
    Description: "Which users should receive the recording events in the client side (recordingStarted, recordingStopped)."
    Type: String
    Default: "publisher_moderator"
    AllowedValues:
    - "all"
    - "publisher_moderator"
    - "moderator"
    - "none"

  OpenviduStreamsVideoMaxRecvBandwidth:
    Description: "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: Number
    Default: 0

  OpenviduStreamsVideoMinRecvBandwidth:
    Description: "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: Number
    Default: 0

  OpenviduStreamsVideoMaxSendBandwidth:
    Description: "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: Number
    Default: 0

  OpenviduStreamsVideoMinSendBandwidth:
    Description: "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: Number
    Default: 0

  OpenViduWebhook:
    Description: "true to enable OpenVidu Server Webhook service. false otherwise."
    Type: String
    Default: false
    AllowedValues:
    - false
    - true

  OpenViduWebhookEndpoint:
    Description: "HTTP endpoint where OpenVidu Server will send Webhook HTTP POST messages."
    Type: String
    Default: http://my.endpoint.com

  OpenViduWebhookHeaders:
    Description: "List of headers that OpenVidu Server Webhook service will attach to HTTP POST messages. JUST one header at the moment"
    Type: String

  OpenViduWebhookEvents:
    Description: >-
      Comma separate list of events that will be sent by OpenVidu Server Webhook service. Check out all the events
       here: https://openvidu.io/docs/reference-docs/openvidu-server-cdr/
    Type: String
    Default: "sessionCreated,sessionDestroyed,participantJoined,participantLeft,webrtcConnectionCreated,webrtcConnectionDestroyed,recordingStatusChanged"

  OpenViduVPC:
    Description: "Dedicated VPC for OpenVidu cluster"
    Type: AWS::EC2::VPC::Id

  OpenViduSubnet:
    Description: "Subnet for OpenVidu cluster"
    Type: AWS::EC2::Subnet::Id

  OpenviduClusterLoadStrategy:
    Description: >
      What parameter should be used to distribute the creation of new sessions
      (and therefore distribution of load) among all available KMSs. Can be: [streams, sessions, mediaObjects, cpu]
    Type: String
    Default: streams
    AllowedValues:
      - streams
      - sessions
      - mediaObjects
      - cpu

Mappings:
  OVAMIMAP:
    eu-west-1:
      AMI: OV_AMI_ID

  KMSAMIMAP:
    eu-west-1:
      AMI: KMS_AMI_ID

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: OpenVidu Pro License
        Parameters:
        - OpenViduLicense
      -
        Label:
          default: SSL Certificate Configuration
        Parameters:
        - WhichCert
        - LetsEncryptEmail
        - MyDomainName
        - PublicElasticIP
        - OwnCertCRT
        - OwnCertKEY
      -
        Label:
          default: Openvidu Configuration
        Parameters:
        - OpenViduSecret
        - OpenviduCDREnable
        - OpenviduClusterLoadStrategy
        - FreeHTTPAccesToRecordingVideos
        - OpenviduRecordingNotification
        - MediaNodesStartNumber
        - OpenviduStreamsVideoMaxRecvBandwidth
        - OpenviduStreamsVideoMinRecvBandwidth
        - OpenviduStreamsVideoMaxSendBandwidth
        - OpenviduStreamsVideoMinSendBandwidth
        - OpenViduWebhook
        - OpenViduWebhookEndpoint
        - OpenViduWebhookHeaders
        - OpenViduWebhookEvents
      -
        Label:
          default: Kibana Dashboard
        Parameters:
        - KibanaUser
        - KibanaPassword
      -
        Label:
          default: Networking Info
        Parameters:
        - OpenViduVPC
        - OpenViduSubnet

    ParameterLabels:
      KeyName:
        default: "Key Name"
      AwsInstanceTypeOV:
        default: "Instance Type For Openvidu Server"
      AwsInstanceTypeKMS:
        default: "Instance Type For Kurento Media Server"
      MyDomainName:
        default: "FQDN"
      PublicElasticIP:
        default: "Public Elastic IP"
      OpenViduLicense:
        default: "Purchased OpenVidu License"
      OpenViduSecret:
        default: "OpenVidu Secret"
      OpenviduCDREnable:
        default: "OpenVidu Server Call Detail Record"
      MediaNodesStartNumber:
        default: "Media Nodes start number"
      KibanaUser:
        default: "Kibana Username"
      KibanaPassword:
        default: "Kibana Password"
      WhichCert:
        default: "Choose The Certificate"
      LetsEncryptEmail:
        default: "Let's Encrypt Email"
      OwnCertCRT:
        default: "CRT File"
      OwnCertKEY:
        default: "KEY File"
      FreeHTTPAccesToRecordingVideos:
        default: "Video Recording Access"
      OpenviduRecordingNotification:
        default: "Recording Notifications"
      OpenviduStreamsVideoMaxRecvBandwidth:
        default: "Openvidu Streams Video Max Recv Bandwidth"
      OpenviduStreamsVideoMinRecvBandwidth:
        default: "Openvidu Streams Video Min Recv Bandwidth"
      OpenviduStreamsVideoMaxSendBandwidth:
        default: "Openvidu Streams Video Max Send Bandwidth"
      OpenviduStreamsVideoMinSendBandwidth:
        default: "Openvidu Streams Video Min Send Bandwidth"
      OpenViduWebhook:
        default: "OpenVidu Webhook"
      OpenViduWebhookEndpoint:
        default: "OpenVidu Webhook Endpoint"
      OpenViduWebhookHeaders:
        default: "OpenVidu Webhook Headers"
      OpenViduWebhookEvents:
        default: "OpenVidu Webhook Events"
      OpenViduCidrBlock:
        default: "OpenVidu Network"
      OpenViduSubnet:
        default: "OpenVidu Subnet"
      OpenviduClusterLoadStrategy:
        default: "Openvidu Cluster Load Strategy"

Conditions:
  NoSelfSigned:
    'Fn::Not':
      - 'Fn::Or':
        - 'Fn::Equals':
            - Ref: WhichCert
            - selfsigned
        - 'Fn::Equals':
            - Ref: WhichCert
            - customcert

Resources:

  OpenViduManageEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: OpenViduManageEC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:RunInstances'
                  - 'ec2:TerminateInstances'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeSecurityGroups'
                  - 'iam:PassRole'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ListHostedZones'
                Resource: '*'
      RoleName: !Join [ "-", [ OpenViduManageEC2Role, !Ref 'AWS::Region'] ]

  OpenviduInstancesProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: "OpenViduInstanceProfile"
      Path: /
      Roles:
        - !Join [ "-", [ OpenViduManageEC2Role, !Ref 'AWS::Region'] ]
    DependsOn:
      - OpenViduManageEC2Role

  OpenViduServer:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: OpenVidu Pro
      AWS::CloudFormation::Init:
        config:
          files:
            "/usr/local/bin/feedGroupVars.sh":
              content: !Sub |
                #!/bin/bash -xe

                cd /usr/src/openvidu

                if [ "${WhichCert}" != "customcert" ]; then
                  PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                  PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                fi
                AWS_AMI_ID=KMS_AMI_ID

                cp group_vars/all.cf group_vars/all

                ################################
                # OpenVidu Configuration       #
                ################################
                sed -i "s/OPENVIDU_INSTANCE_PUBLIC_IP/$PIP/" group_vars/all
                sed -i "s/OPENVIDU_INSTANCE_PUBLIC_DOMAIN_NAME/$PublicHostname/" group_vars/all
                sed -i "s/OPENVIDU_CDR/${OpenviduCDREnable}/" group_vars/all
                sed -i "s/selfsigned/${WhichCert}/" group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" group_vars/all
                sed -i "s/OPENVIDU_LICENSE/${OpenViduLicense}/" group_vars/all
                sed -i "s/MY_SECRET/${OpenViduSecret}/" group_vars/all
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" group_vars/all
                sed -i "s/KMS_RUN_CLUSTER/true/" group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" group_vars/all
                sed -i "s/OPENVIDUCLUSTERLOADSTRATEGY/${OpenviduClusterLoadStrategy}/" group_vars/all
                sed -i "s/KIBANA_USERNAME/${KibanaUser}/" group_vars/all
                sed -i "s/KIBANA_PASSWORD/${KibanaPassword}/" group_vars/all
                sed -i "s/AWS_DEFAULT_REGION/${AWS::Region}/" group_vars/all
                sed -i "s/WEBHOOK_ENABLED/${OpenViduWebhook}/" group_vars/all
                sed -i "s#WEBHOOK_ENDPOINT#${OpenViduWebhookEndpoint}#" group_vars/all
                sed -i "s/WEBHOOK_HEADERS/${OpenViduWebhookHeaders}/" group_vars/all
                sed -i "s/WEBHOOK_EVENTS/${OpenViduWebhookEvents}/" group_vars/all
                sed -i "s/TURN_MIN_PORT/40000/" group_vars/all
                sed -i "s/TURN_MAX_PORT/65535/" group_vars/all
                sed -i "s/OPENVIDU_PRO_CLUSTER_ENVIRONMENT/aws/" group_vars/all
                sed -i "s/MEDIA_NODES_START_NUMBER/${MediaNodesStartNumber}/" group_vars/all

                ################################
                # Running in MarketPlace       #
                ################################
                sed -i "s/install_software: true/install_software: false/" roles/coturn/vars/main.yml
                sed -i "s/install_software: true/install_software: false/" roles/elastic/vars/main.yml
                sed -i "s/install_software: true/install_software: false/" roles/nginx/vars/main.yml
                sed -i "s/install_software: true/install_software: false/" roles/openvidu/vars/main.yml

                ################################
                # Launch kms on demand script  #
                ################################
                # Remove on_premise vars and rename template
                rm roles/openvidu/vars/main.yml
                mv roles/openvidu/vars/main.yml.cf roles/openvidu/vars/main.yml

                # Replace vars
                sed -i "s/IMAGE_ID/$AWS_AMI_ID/" roles/openvidu/vars/main.yml
                sed -i "s/INSTANCE_TYPE/${AwsInstanceTypeKMS}/" roles/openvidu/vars/main.yml
                sed -i "s/KEY_NAME/${KeyName}/" roles/openvidu/vars/main.yml
                sed -i "s/SUBNET_ID/${OpenViduSubnet}/" roles/openvidu/vars/main.yml
                sed -i "s/OPENVIDU_SECRET/${OpenViduSecret}/" roles/openvidu/vars/main.yml
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/buildCerts.sh":
              content: !Sub |
                #!/bin/bash
                cd /usr/src/openvidu
                wget -O nginx.crt ${OwnCertCRT}
                wget -O nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
            "/usr/local/bin/checkInternetConnection.sh":
              content: !Sub |
                #!/bin/bash
                cd /usr/src/openvidu

                # Check Internet connection
                ping -q -w 1 -c 1 8.8.8.8 > /dev/null && no_internet=false || no_internet=true

                # If there is no internet connection, Kibana will not import dashboards
                sed -i "s/NO_INTERNET/$no_internet/" group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap [OVAMIMAP, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref AwsInstanceTypeOV
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OpenviduInstancesProfile
      SubnetId: !Ref OpenViduSubnet
      SecurityGroupIds:
        - !GetAtt 'OpenViduSecurityGroup.GroupId'
      Tags:
        - Key: Name
          Value: 'OpenVidu Server'
        - Key: 'ov-cluster-member'
          Value: 'server'
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenViduServer

            /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }

            if [ "${WhichCert}" == "owncert" ]; then
              /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
            fi

            /usr/local/bin/checkInternetConnection.sh || { echo "[Openvidu] error checking internet connection"; exit 1; }

            cd /usr/src/openvidu

            cat>play.yaml<<EOF
            - hosts: all
              roles:
                - nginx
                - openvidu
                - elastic
                - system-shutdown
                - coturn
            EOF

            ansible-playbook -i "localhost," -c local play.yaml

            # Getting security group id for media server lauching script
            /opt/openvidu/cluster/aws/openvidu_get_security_group_id.sh

            # Wait for the app
            /usr/local/bin/check_app_ready.sh

            # sending the finish call
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 50

  KMSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref OpenViduVPC
      GroupDescription: SSH, Proxy and KMS WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join [ "/", [ !GetAtt OpenViduServer.PrivateIp, "32" ] ]
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: !Join [ "/", [ !GetAtt OpenViduServer.PrivateIp, "32" ] ]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  OpenViduSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      VpcId: !Ref OpenViduVPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: 1

  MyEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenViduServer
      EIP: !Ref PublicElasticIP

Outputs:
  OpenViduInspector:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName
          - '/inspector'

  OpenViduInspectorLE:
    Description: "Use this URL to connect to OpenVidu with user and password if you're using Let's Encrypt"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/inspector'
    Condition: NoSelfSigned

  Kibana:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName
          - '/kibana'

  KibanaLE:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/kibana'
    Condition: NoSelfSigned
