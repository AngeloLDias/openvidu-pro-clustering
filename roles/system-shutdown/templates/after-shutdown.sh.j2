#!/bin/bash

# In EC2 AWS, update the ip and hostname
if [[ ! -z $(curl -s http://169.254.169.254/1.0/) ]];
    PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
    PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
else
    PUBLIC_IP={{ openvidu_public_ip }}
    PUBLIC_HOSTNAME={{ openvidu_publicurl }}
fi


CLUSTER_MEMBER=$(cat /opt/openvidu/openvidu-cluster-member)

if [ "${CLUSTER_MEMBER}" == "server" ]; then
    systemctl stop coturn
    systemctl stop nginx

    sleep 5

    cat /etc/turnserver.conf | grep -v external-ip >/tmp/turnserver.conf
    echo "external-ip=${PUBLIC_IP}" >> /tmp/turnserver.conf
    mv /tmp/turnserver.conf /etc/turnserver.conf

    # Delete old lines of application.properties
    sed -i '/openvidu.publicurl=/d' /opt/openvidu/application.properties
    sed -i '/coturn.ip=/d' /opt/openvidu/application.properties
    sed -i '/openvidu.recording.composed-url=/d' /opt/openvidu/application.properties

    # Add new lines
    echo openvidu.publicurl=https://${PUBLIC_HOSTNAME}:4443 >> /opt/openvidu/application.properties
    echo coturn.ip=${PUBLIC_IP} >> /opt/openvidu/application.properties
    echo openvidu.recording.composed-url=https://${PUBLIC_HOSTNAME}/inspector/ >> /opt/openvidu/application.properties

cat >/etc/nginx/sites-enabled/kms-ov<<EOF
server {
    listen 4443 ssl;
    server_name ${PUBLIC_HOSTNAME};

    ssl on;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    include sites-available/proxy.conf;

    location / {
        proxy_pass http://localhost:5443;
    }
}
EOF

cat >/etc/nginx/sites-enabled/default<<EOF
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;

upstream kibana {
    server localhost:5601;
}

upstream inspector {
    server localhost:5443;
}

server {
    listen 127.0.0.1:80;
    server_name _;

    location /kibana {
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        rewrite ^/kibana/(.*)$ /\$1 break;
        proxy_pass http://kibana/;
    }
}

server {
    listen 443 ssl default deferred;
    server_name ${PUBLIC_HOSTNAME};

    ssl on;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    include sites-available/proxy.conf;

    root /var/www/html;

    location /inspector {
        rewrite ^/inspector/(.*)$ /\$1 break;
        proxy_pass http://inspector/;
    }

    location /kibana {
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        rewrite ^/kibana/(.*)$ /\$1 break;
        proxy_pass http://kibana/;
        auth_basic "Openvidu Monitoring";
        auth_basic_user_file /etc/nginx/conf.d/kibana.htpasswd;
    }
}
EOF

    sleep 5
    systemctl start coturn
    systemctl start nginx
else
    KURENTO_PUBLIC_IP=$(curl ifconfig.co)
    systemctl stop kurento-media-server

    sleep 5

    echo externalAdress=${KURENTO_PUBLIC_IP} >> /tmp/WebRtcEndpoint.conf.ini
    mv /tmp/WebRtcEndpoint.conf.ini /etc/kurento/modules/kurento/WebRtcEndpoint.conf.ini

    sleep 5

    systemctl start kurento-media-server
fi
